// Code generated by protoc-gen-go. DO NOT EDIT.
// source: app.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	app.proto

It has these top-level messages:
	StoreReq
	StoreResp
	GetReq
	GetResp
	GetByTokenReq
	GetByTokenResp
	Account
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StoreReq struct {
	AccountToken string `protobuf:"bytes,1,opt,name=accountToken" json:"accountToken,omitempty"`
	Key          string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Val          []byte `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *StoreReq) Reset()                    { *m = StoreReq{} }
func (m *StoreReq) String() string            { return proto.CompactTextString(m) }
func (*StoreReq) ProtoMessage()               {}
func (*StoreReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StoreReq) GetAccountToken() string {
	if m != nil {
		return m.AccountToken
	}
	return ""
}

func (m *StoreReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StoreReq) GetVal() []byte {
	if m != nil {
		return m.Val
	}
	return nil
}

type StoreResp struct {
}

func (m *StoreResp) Reset()                    { *m = StoreResp{} }
func (m *StoreResp) String() string            { return proto.CompactTextString(m) }
func (*StoreResp) ProtoMessage()               {}
func (*StoreResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetReq struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *GetReq) Reset()                    { *m = GetReq{} }
func (m *GetReq) String() string            { return proto.CompactTextString(m) }
func (*GetReq) ProtoMessage()               {}
func (*GetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetResp struct {
	Val []byte `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *GetResp) Reset()                    { *m = GetResp{} }
func (m *GetResp) String() string            { return proto.CompactTextString(m) }
func (*GetResp) ProtoMessage()               {}
func (*GetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetResp) GetVal() []byte {
	if m != nil {
		return m.Val
	}
	return nil
}

type GetByTokenReq struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GetByTokenReq) Reset()                    { *m = GetByTokenReq{} }
func (m *GetByTokenReq) String() string            { return proto.CompactTextString(m) }
func (*GetByTokenReq) ProtoMessage()               {}
func (*GetByTokenReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetByTokenReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type GetByTokenResp struct {
	Account *Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *GetByTokenResp) Reset()                    { *m = GetByTokenResp{} }
func (m *GetByTokenResp) String() string            { return proto.CompactTextString(m) }
func (*GetByTokenResp) ProtoMessage()               {}
func (*GetByTokenResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetByTokenResp) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type Account struct {
	MaxCacheKeys int64 `protobuf:"varint,1,opt,name=max_cache_keys,json=maxCacheKeys" json:"max_cache_keys,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Account) GetMaxCacheKeys() int64 {
	if m != nil {
		return m.MaxCacheKeys
	}
	return 0
}

func init() {
	proto.RegisterType((*StoreReq)(nil), "rpc.StoreReq")
	proto.RegisterType((*StoreResp)(nil), "rpc.StoreResp")
	proto.RegisterType((*GetReq)(nil), "rpc.GetReq")
	proto.RegisterType((*GetResp)(nil), "rpc.GetResp")
	proto.RegisterType((*GetByTokenReq)(nil), "rpc.GetByTokenReq")
	proto.RegisterType((*GetByTokenResp)(nil), "rpc.GetByTokenResp")
	proto.RegisterType((*Account)(nil), "rpc.Account")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cache service

type CacheClient interface {
	Store(ctx context.Context, in *StoreReq, opts ...grpc.CallOption) (*StoreResp, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
}

type cacheClient struct {
	cc *grpc.ClientConn
}

func NewCacheClient(cc *grpc.ClientConn) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) Store(ctx context.Context, in *StoreReq, opts ...grpc.CallOption) (*StoreResp, error) {
	out := new(StoreResp)
	err := grpc.Invoke(ctx, "/rpc.Cache/Store", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := grpc.Invoke(ctx, "/rpc.Cache/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cache service

type CacheServer interface {
	Store(context.Context, *StoreReq) (*StoreResp, error)
	Get(context.Context, *GetReq) (*GetResp, error)
}

func RegisterCacheServer(s *grpc.Server, srv CacheServer) {
	s.RegisterService(&_Cache_serviceDesc, srv)
}

func _Cache_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Cache/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Store(ctx, req.(*StoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Cache/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _Cache_Store_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Cache_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app.proto",
}

// Client API for Accounts service

type AccountsClient interface {
	GetByToken(ctx context.Context, in *GetByTokenReq, opts ...grpc.CallOption) (*GetByTokenResp, error)
}

type accountsClient struct {
	cc *grpc.ClientConn
}

func NewAccountsClient(cc *grpc.ClientConn) AccountsClient {
	return &accountsClient{cc}
}

func (c *accountsClient) GetByToken(ctx context.Context, in *GetByTokenReq, opts ...grpc.CallOption) (*GetByTokenResp, error) {
	out := new(GetByTokenResp)
	err := grpc.Invoke(ctx, "/rpc.Accounts/GetByToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Accounts service

type AccountsServer interface {
	GetByToken(context.Context, *GetByTokenReq) (*GetByTokenResp, error)
}

func RegisterAccountsServer(s *grpc.Server, srv AccountsServer) {
	s.RegisterService(&_Accounts_serviceDesc, srv)
}

func _Accounts_GetByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Accounts/GetByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetByToken(ctx, req.(*GetByTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Accounts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Accounts",
	HandlerType: (*AccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByToken",
			Handler:    _Accounts_GetByToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app.proto",
}

func init() { proto.RegisterFile("app.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x51, 0x3f, 0x4f, 0x84, 0x30,
	0x14, 0x17, 0x09, 0xc7, 0xf1, 0xe0, 0x88, 0x79, 0x3a, 0x10, 0x5c, 0x2e, 0x8d, 0x1a, 0x26, 0x4c,
	0x70, 0xd0, 0x55, 0x6f, 0x60, 0x70, 0xab, 0x3a, 0x5f, 0x6a, 0xd3, 0xc4, 0x04, 0xef, 0xa8, 0xb4,
	0x9a, 0xe3, 0xdb, 0x9b, 0x96, 0x22, 0x98, 0xdb, 0xfa, 0xfb, 0xcb, 0x7b, 0x0f, 0x88, 0x98, 0x94,
	0xa5, 0xec, 0x5a, 0xdd, 0xa2, 0xdf, 0x49, 0x4e, 0x28, 0x2c, 0x5f, 0x74, 0xdb, 0x09, 0x2a, 0xbe,
	0x90, 0x40, 0xc2, 0x38, 0x6f, 0xbf, 0xf7, 0xfa, 0xb5, 0x6d, 0xc4, 0x3e, 0xf3, 0xd6, 0x5e, 0x11,
	0xd1, 0x7f, 0x1c, 0x9e, 0x81, 0xdf, 0x88, 0x3e, 0x3b, 0xb5, 0x92, 0x79, 0x1a, 0xe6, 0x87, 0x7d,
	0x66, 0xfe, 0xda, 0x2b, 0x12, 0x6a, 0x9e, 0x24, 0x86, 0xc8, 0x75, 0x2a, 0x49, 0x72, 0x58, 0xd4,
	0x42, 0x9b, 0x7a, 0x17, 0xf5, 0xfe, 0xa2, 0xe4, 0x12, 0x42, 0xab, 0x29, 0x39, 0xb6, 0x78, 0x53,
	0xcb, 0x35, 0xac, 0x6a, 0xa1, 0x9f, 0x7a, 0xfb, 0x5d, 0x93, 0xbf, 0x80, 0x40, 0xcf, 0xe6, 0x1a,
	0x00, 0x79, 0x80, 0x74, 0x6e, 0x53, 0x12, 0x6f, 0x20, 0x74, 0x23, 0x5b, 0x67, 0x5c, 0x25, 0x65,
	0x27, 0x79, 0xf9, 0x38, 0x70, 0x74, 0x14, 0xc9, 0x2d, 0x84, 0x8e, 0xc3, 0x2b, 0x48, 0x77, 0xec,
	0xb0, 0xe5, 0x8c, 0x7f, 0x88, 0x6d, 0x23, 0x7a, 0x65, 0x93, 0x3e, 0x4d, 0x76, 0xec, 0xb0, 0x31,
	0xe4, 0xb3, 0xe8, 0x55, 0xf5, 0x06, 0x81, 0x05, 0x58, 0x40, 0x60, 0x17, 0xc4, 0x95, 0x6d, 0x1e,
	0x0f, 0x98, 0xa7, 0x73, 0xa8, 0x24, 0x39, 0x41, 0x02, 0x7e, 0x2d, 0x34, 0xc6, 0x56, 0x18, 0xee,
	0x90, 0x27, 0x13, 0x30, 0x9e, 0x6a, 0x03, 0x4b, 0x37, 0x87, 0xc2, 0x7b, 0x80, 0x69, 0x1b, 0xc4,
	0xd1, 0x39, 0x5d, 0x21, 0x3f, 0x3f, 0xe2, 0x4c, 0xc9, 0xfb, 0xc2, 0xfe, 0xd3, 0xbb, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x59, 0x91, 0xda, 0xd3, 0xe0, 0x01, 0x00, 0x00,
}
